@model ProjectModel;
@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_Layout.cshtml";

}
<style>
    figure {
        border: 2px solid #ddd;
        padding: 10px;
        margin: 0;
        white-space: pre-wrap; /* JSON'un düzgün bir şekilde gösterilmesi için */
    }

    code {
        padding: 5px 5px !important;
        font-family: 'Courier New', monospace;
        display: block;
        font-size: medium;
        white-space: pre-wrap;
        overflow-x: scroll !important;
        margin: 0;
        background-color: #000000;
        color: #FC6736;
        max-height: 120px !important;
    }
</style>

<div class="container-xl d-flex flex-column justify-content-center" id="rconfig">

    <div class="row">

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Project List</h3>
                    <div class="card-actions">
                        <button class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#modal-create-project">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round" class="icon"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path> <line x1="12" y1="5" x2="12" y2="19"></line> <line x1="5" y1="12" x2="19" y2="12"></line></svg>
                            Create
                        </button>
                        <button v-if="this.project.selectedProject!==null" class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#modal-settings-project">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-settings" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                <path d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z" />
                                <path d="M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0" />
                            </svg>
                            Settings
                        </button>
                        <button v-if="this.project.selectedProject!==null"
                                v-on:click="DeleteProject(`${project.selectedProject}`)"
                                class="btn btn-danger btn-sm">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-trash" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                <path d="M4 7l16 0" />
                                <path d="M10 11l0 6" />
                                <path d="M14 11l0 6" />
                                <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" />
                                <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" />
                            </svg>
                            Delete
                        </button>
                        <button v-if="this.project.selectedProject!==null" class="btn btn-info btn-sm" data-bs-toggle="modal" data-bs-target="#modal-key-view">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-key" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ffffff" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                <path d="M16.555 3.843l3.602 3.602a2.877 2.877 0 0 1 0 4.069l-2.643 2.643a2.877 2.877 0 0 1 -4.069 0l-.301 -.301l-6.558 6.558a2 2 0 0 1 -1.239 .578l-.175 .008h-1.172a1 1 0 0 1 -.993 -.883l-.007 -.117v-1.172a2 2 0 0 1 .467 -1.284l.119 -.13l.414 -.414h2v-2h2v-2l2.144 -2.144l-.301 -.301a2.877 2.877 0 0 1 0 -4.069l2.643 -2.643a2.877 2.877 0 0 1 4.069 0z" />
                                <path d="M15 9h.01" />
                            </svg>
                            Key
                        </button>
                    </div>
                </div>



                <div class="form-selectgroup form-selectgroup-boxes d-flex flex-column">
                    @foreach (var item in Model.Projects)
                    {
                        string avatar = item.name.First().ToString();
                        avatar += item.application.First().ToString();

                        <label class="form-selectgroup-item flex-fill">

                            <input type="radio" name="rconfigproject" class="form-selectgroup-input" v-on:click="SelectedProject('@item.id')">
                            <div class="form-selectgroup-label d-flex align-items-center p-3">
                                <div class="me-3">
                                    <span class="form-selectgroup-check"></span>
                                </div>
                                <div class="form-selectgroup-label-content d-flex align-items-center">
                                    <span class="avatar me-3">@avatar</span>
                                    <div>
                                        <div class="font-weight-medium">@Html.DisplayFor(q=>item.name)</div>
                                        <div class="text-muted">@Html.DisplayFor(q=>item.application)</div>
                                    </div>
                                </div>
                            </div>
                        </label>

                    }

                </div>

            </div>
        </div>
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">
                        <span class="mx-2" v-if="status.waiting==true">
                            <div class="spinner-border spinner-border-sm text-danger" role="status"></div>
                        </span>
                        Projects sections
                    </h3>
                    <div class="card-actions" v-if="this.sections.selected==true">
                        <button class="btn" id="createSections" data-bs-toggle="modal" data-bs-target="#modal-create-section">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-pencil-plus" width="44" height="44" viewBox="0 0 24 24" stroke-width="3" stroke="#00abfb" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                <path d="M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4" />
                                <path d="M13.5 6.5l4 4" />
                                <path d="M16 19h6" />
                                <path d="M19 16v6" />
                            </svg>

                        </button>
                    </div>
                </div>
                <div class="empty" v-if="this.sections.selected==false">
                    <div class="empty-img">
                        <img src="~/img/ui/page.png" height="128" alt="">
                    </div>
                    <p class="empty-title">Choose a Project</p>
                    <p class="empty-subtitle text-muted">
                        After selecting the project, wait for the subsections to load.
                    </p>
                    <div class="empty-action">
                        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modal-create-project">
                            <!-- Download SVG icon from http://tabler-icons.io/i/plus -->
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                                <line x1="12" y1="5" x2="12" y2="19"></line>
                                <line x1="5" y1="12" x2="19" y2="12"></line>
                            </svg>
                            Add your first project
                        </button>
                    </div>
                </div>
                <div v-if="this.sections.selected==true">
                    <div class="card" v-for="item in this.sections.data">
                        <div class="card-header card-header-light">
                            <h6 class="card-title">{{item.name}}</h6>
                            <div class="card-actions">

                                <button v-on:click="DeleteSection(`${item.id}`)" class="btn">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-trash" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#ff2825" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                        <path d="M4 7l16 0" />
                                        <path d="M10 11l0 6" />
                                        <path d="M14 11l0 6" />
                                        <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" />
                                        <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" />
                                    </svg>
                                </button>

                            </div>
                        </div>
                        <div class="card-code">
                            <figure>

                                <code> {{ GetValue(item.value) }}</code>

                            </figure>
                        </div>
                    </div>


                </div>

            </div>
        </div>
    </div>

    <!--Create New Section-->
    <div class="modal modal-blur fade" id="modal-create-section" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Section</h5>
                    <button type="button" id="closeSectionModal" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Json name</label>
                        <input type="text" class="form-control" v-model="createSection.name" placeholder="Json name">
                    </div>
                    <div class="mb-3 mb-0">
                        <label class="form-label">Json value</label>
                        <textarea rows="5" class="form-control" v-model="createSection.value" placeholder="{Json value}"></textarea>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn me-auto" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" v-on:click="CreateSection">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <!--Create New Project-->
    <div class="modal modal-blur fade" id="modal-create-project" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create Project</h5>
                    <button type="button" id="closeSectionModal" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <input type="text" class="form-control" v-model="createProject.name" placeholder="Json name">
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Application </label>
                        <input type="text" class="form-control" v-model="createProject.application" placeholder="Json name">
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn me-auto" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" v-on:click="CreateProject">Save changes</button>
                </div>
            </div>
        </div>
    </div>


    <!--View Project Key-->
    <div class="modal modal-blur fade" id="modal-key-view" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">View Project Secret Key</h5>
                    <button type="button" id="closeSectionModal" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" v-if="this.project.selectedProject!==null">

                    <div class="mb-3">
                        <label class="form-label">Secret</label>
                        <div class="input-group mb-2">
                            <input type="text" class="form-control" name="secretjson" placeholder="Secret Json" v-model="this.project.selectedJson.secret">
                            <button class="btn" type="button" v-on:click="Copy(`${project.selectedJson.secret}`)">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-copy" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#000000" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                    <path d="M7 7m0 2.667a2.667 2.667 0 0 1 2.667 -2.667h8.666a2.667 2.667 0 0 1 2.667 2.667v8.666a2.667 2.667 0 0 1 -2.667 2.667h-8.666a2.667 2.667 0 0 1 -2.667 -2.667z" />
                                    <path d="M4.012 16.737a2.005 2.005 0 0 1 -1.012 -1.737v-10c0 -1.1 .9 -2 2 -2h10c.75 0 1.158 .385 1.5 1" />
                                </svg>
                                Copy

                            </button>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Key</label>
                        <div class="input-group mb-2">
                            <input type="text" class="form-control" name="keywordjson" placeholder="Keyword Json" v-model="this.project.selectedJson.key">
                            <button class="btn" type="button" v-on:click="Copy(`${project.selectedJson.key}`)">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-copy" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#000000" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                    <path d="M7 7m0 2.667a2.667 2.667 0 0 1 2.667 -2.667h8.666a2.667 2.667 0 0 1 2.667 2.667v8.666a2.667 2.667 0 0 1 -2.667 2.667h-8.666a2.667 2.667 0 0 1 -2.667 -2.667z" />
                                    <path d="M4.012 16.737a2.005 2.005 0 0 1 -1.012 -1.737v-10c0 -1.1 .9 -2 2 -2h10c.75 0 1.158 .385 1.5 1" />
                                </svg>
                                Copy

                            </button>
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn me-auto" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--Project settings-->

    <div class="modal modal-blur fade" id="modal-settings-project" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Project Settings</h5>
                    <button type="button" id="closeSectionModal" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" v-if="this.project.selectedProject!==null">

                    <div class="card">
                        <div class="card-header">
                            <ul class="nav nav-tabs card-header-tabs nav-fill" data-bs-toggle="tabs" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <a href="#tabs-home-11" class="nav-link active" data-bs-toggle="tab" aria-selected="true" role="tab">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-adjustments-horizontal" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#000000" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                            <path d="M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" />
                                            <path d="M4 6l8 0" />
                                            <path d="M16 6l4 0" />
                                            <path d="M8 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" />
                                            <path d="M4 12l2 0" />
                                            <path d="M10 12l10 0" />
                                            <path d="M17 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0" />
                                            <path d="M4 18l11 0" />
                                            <path d="M19 18l1 0" />
                                        </svg>
                                        &nbsp;
                                        Settings
                                    </a>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <a href="#tabs-profile-11" class="nav-link" data-bs-toggle="tab" aria-selected="false" role="tab" tabindex="-1">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-shield-lock-filled" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#000000" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                            <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                            <path d="M11.998 2l.118 .007l.059 .008l.061 .013l.111 .034a.993 .993 0 0 1 .217 .112l.104 .082l.255 .218a11 11 0 0 0 7.189 2.537l.342 -.01a1 1 0 0 1 1.005 .717a13 13 0 0 1 -9.208 16.25a1 1 0 0 1 -.502 0a13 13 0 0 1 -9.209 -16.25a1 1 0 0 1 1.005 -.717a11 11 0 0 0 7.531 -2.527l.263 -.225l.096 -.075a.993 .993 0 0 1 .217 -.112l.112 -.034a.97 .97 0 0 1 .119 -.021l.115 -.007zm.002 7a2 2 0 0 0 -1.995 1.85l-.005 .15l.005 .15a2 2 0 0 0 .995 1.581v1.769l.007 .117a1 1 0 0 0 1.993 -.117l.001 -1.768a2 2 0 0 0 -1.001 -3.732z" stroke-width="0" fill="currentColor" />
                                        </svg>
                                        &nbsp;
                                        Security
                                    </a>
                                </li>
                            </ul>
                        </div>
                        <div class="card-body">
                            <div class="tab-content">
                                <div class="tab-pane active show p-5" id="tabs-home-11" role="tabpanel">

                                    <button v-if="this.project.selectedJson.active==true" v-on:click="ProjectStatusChange(`${project.selectedProject}`,`0`)" class="btn btn-outline-danger active w-100 my-2">
                                        Disable this project
                                    </button>
                                    <button v-if="this.project.selectedJson.active==false" v-on:click="ProjectStatusChange(`${project.selectedProject}`,`1`)" class="btn btn-outline-success active w-100 my-2">
                                        Enable this project
                                    </button>

                                    <button class="btn btn-outline-danger active w-100 my-2" v-on:click="DeleteProject(`${project.selectedProject}`)">
                                        Delete This Project
                                    </button>
                                </div>
                                <div class="tab-pane" id="tabs-profile-11" role="tabpanel">

                                    <div class="row">
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">New IP</label>
                                                <input type="text" class="form-control" v-model="security.newIp" placeholder="IP">
                                            </div>
                                            <div class="mb-3">
                                                <button class="btn btn-ghost-primary active" v-if="this.security.newIp!=null" v-on:click="AddNewAccess">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-square-rounded-plus-filled" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#000000" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                        <path d="M12 2l.324 .001l.318 .004l.616 .017l.299 .013l.579 .034l.553 .046c4.785 .464 6.732 2.411 7.196 7.196l.046 .553l.034 .579c.005 .098 .01 .198 .013 .299l.017 .616l.005 .642l-.005 .642l-.017 .616l-.013 .299l-.034 .579l-.046 .553c-.464 4.785 -2.411 6.732 -7.196 7.196l-.553 .046l-.579 .034c-.098 .005 -.198 .01 -.299 .013l-.616 .017l-.642 .005l-.642 -.005l-.616 -.017l-.299 -.013l-.579 -.034l-.553 -.046c-4.785 -.464 -6.732 -2.411 -7.196 -7.196l-.046 -.553l-.034 -.579a28.058 28.058 0 0 1 -.013 -.299l-.017 -.616c-.003 -.21 -.005 -.424 -.005 -.642l.001 -.324l.004 -.318l.017 -.616l.013 -.299l.034 -.579l.046 -.553c.464 -4.785 2.411 -6.732 7.196 -7.196l.553 -.046l.579 -.034c.098 -.005 .198 -.01 .299 -.013l.616 -.017c.21 -.003 .424 -.005 .642 -.005zm0 6a1 1 0 0 0 -1 1v2h-2l-.117 .007a1 1 0 0 0 .117 1.993h2v2l.007 .117a1 1 0 0 0 1.993 -.117v-2h2l.117 -.007a1 1 0 0 0 -.117 -1.993h-2v-2l-.007 -.117a1 1 0 0 0 -.993 -.883z" fill="currentColor" stroke-width="0" />
                                                    </svg>&nbsp;
                                                    Add
                                                </button>
                                                <button class="btn btn-ghost-danger active float-end" v-if="this.security.selected!=null" v-on:click="DeleteAccessAddress">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-trash-filled" width="44" height="44" viewBox="0 0 24 24" stroke-width="1.5" stroke="#000000" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                                        <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                                        <path d="M20 6a1 1 0 0 1 .117 1.993l-.117 .007h-.081l-.919 11a3 3 0 0 1 -2.824 2.995l-.176 .005h-8c-1.598 0 -2.904 -1.249 -2.992 -2.75l-.005 -.167l-.923 -11.083h-.08a1 1 0 0 1 -.117 -1.993l.117 -.007h16z" stroke-width="0" fill="currentColor" />
                                                        <path d="M14 2a2 2 0 0 1 2 2a1 1 0 0 1 -1.993 .117l-.007 -.117h-4l-.007 .117a1 1 0 0 1 -1.993 -.117a2 2 0 0 1 1.85 -1.995l.15 -.005h4z" stroke-width="0" fill="currentColor" />
                                                    </svg>
                                                    &nbsp;
                                                    Delete
                                                </button>
                                            </div>
                                        </div>
                                        <div class="col-md-6">
                                            <div class="mb-3">
                                                <label class="form-label">Access List</label>
                                                <div>
                                                    <label class="form-check" v-for="ips in project.selectedJson.restrictedList?.split(';')">
                                                        <input class="form-check-input" type="radio" :value="`${ips}`" v-model="security.selected" name="selectedSecurityIp">
                                                        <span class="form-check-label">{{ips}}</span>

                                                    </label>

                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>


                </div>
                <div class="modal-footer">
                    <button type="button" class="btn me-auto" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


</div>




<script src="~/js/vue.js"></script>
<script src="~/js/axios.js"></script>
<script>
    let app = new Vue({
        el: '#rconfig',
        data() {
            return {
                status: {
                    waiting: false
                },
                project: {
                    selectedProject: null,
                    selectedJson: null

                },
                sections: {
                    show: false,
                    loading: false,
                    selected: false,
                    data: [],


                },
                createSection: {
                    name: "",
                    value: ""
                },
                createProject: {
                    name: "",
                    application: ""
                },
                security: {
                    selected: null,
                    newIp: null
                }

            }
        },            
        mounted() {
            this.status.waiting=true;
        },
        methods: {
            SelectedProject: function (id) {
                this.status.waiting = true;
                this.sections.selected = true;
                this.project.selectedProject = id;


                axios.post("/Home/GetSectionOfProject?projectId=" + id)
                    .then(resp => {

                        if (resp.status == 200) {
                            if (resp.data.isError == false) {
                                this.sections.data = resp.data.sectionsOfProject;
                            }
                        }

                    });

                axios.post("/Home/ProjectDetail?projectId=" + id)
                    .then(resp => {

                        if (resp.status == 200) {
                            this.project.selectedJson = resp.data;

                        }

                    }).finally(() => {
                        this.status.waiting = false;
                    });

            },
            GetValue: function (value) {
                console.log(value);
                return value;
            },
            CreateSection: function () {

                this.status.waiting = true;

                var sectionName = this.createSection.name;
                var sectionValue = this.createSection.value;
                if (sectionName != null && sectionValue != null) {


                    var formData = new URLSearchParams();
                    formData.append("projectId", this.project.selectedProject);
                    formData.append("name", sectionName);
                    formData.append("value", sectionValue);


                    axios.post("/Home/CreateSection", formData)
                        .then(resp => {

                            this.SelectedProject(this.project.selectedProject);
                            document.getElementById("closeSectionModal").click();
                        })
                        .catch(error => {

                        })
                        .finally(() => {
                            this.status.waiting = false;
                        });

                }
            },
            DeleteSection: function (id) {
                Swal.fire({
                    title: "Are you sure?",
                    text: "This section will be permanently deleted. Delete?!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                    if (result.isConfirmed) {

                        this.status.waiting = true;

                        axios.post("/Home/DeleteSection?id=" + id)
                            .then(resp => {

                                if (resp.status == 200) {

                                    this.SelectedProject(this.project.selectedProject);
                                }

                            })
                            .finally(() => {
                                this.status.waiting = false;
                            });
                    }
                });


            },
            CreateProject: function () {

                axios.post("/Home/CreateProject?name=" + this.createProject.name + "&application=" + this.createProject.application)
                    .then(resp => {

                        if (resp.status == 200) {

                            window.location.reload();

                        }

                    });
            },
            DeleteProject: function (id) {
                Swal.fire({
                    title: "Are you sure?",
                    text: "This project will be permanently deleted. Delete?!",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                    if (result.isConfirmed) {

                        axios.post("/Home/DeleteProject?id=" + id)
                            .then(resp => {

                                if (resp.status == 200) {

                                    window.location.reload();
                                }

                            });
                    }
                });
            },
            Copy: function (value) {
                navigator.clipboard.writeText(value).then(() => {

                    Swal.fire({
                        position: "top-end",
                        icon: "success",
                        title: "Copied value : " + value,
                        showConfirmButton: false,
                        timer: 1500
                    });

                }).catch(err => {
                    Swal.fire({
                        position: "top-end",
                        icon: "error",
                        title: "Copied ops error",
                        showConfirmButton: false,
                        timer: 1500
                    });
                });


            },
            AddNewAccess: function () {

                this.status.waiting = true;
                axios.post("/Home/AddAccessIp?id=" + this.project.selectedProject + "&ip=" + this.security.newIp)
                    .then(resp => {

                        if (resp.status == 200) {
                            this.project.selectedJson = resp.data;
                            Swal.fire({
                                position: "top-end",
                                icon: "success",
                                title: "The IP address has been added to the access list.",
                                showConfirmButton: false,
                                timer: 1500
                            });

                        } else {
                            Swal.fire({
                                position: "top-end",
                                icon: "error",
                                title: "Failed to add ip address",
                                showConfirmButton: false,
                                timer: 1500
                            });
                        }

                    }).finally(() => {
                        this.status.waiting = false;
                        this.security.newIp = null;
                        this.security.selected = null;
                    });
            },
            DeleteAccessAddress: function () {
                Swal.fire({
                    title: "Are you sure?",
                    text: "This IP address will be permanently deleted from the access list.Should we continue?? !",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                    if (result.isConfirmed) {

                        this.status.waiting = true;

                        axios.post("/Home/DeleteAccessIp?id=" + this.project.selectedProject + "&ip=" + this.security.selected)
                            .then(resp => {

                                if (resp.status == 200) {
                                    this.project.selectedJson = resp.data;
                                    Swal.fire({
                                        position: "top-end",
                                        icon: "success",
                                        title: "The IP address has been deleted to the access list.",
                                        showConfirmButton: false,
                                        timer: 1500
                                    });

                                } else {
                                    Swal.fire({
                                        position: "top-end",
                                        icon: "error",
                                        title: "Failed to delete ip address",
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                }

                            }).finally(() => {
                                this.status.waiting = false;
                                this.security.newIp = null;
                                this.security.selected = null;
                            });
                    }
                });

            },
            ProjectStatusChange: function (id, status) {

                Swal.fire({
                    title: "Are you sure?",
                    text: "These potential bugs will be modified and may be affected by the change in existing integrated applications. Should we continue?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Yes, delete it!"
                }).then((result) => {
                    if (result.isConfirmed) {
                        this.status.waiting = true;
                        axios.post("/Home/StatusChange?id=" + id + "&status=" + status)
                            .then(resp => {

                                if (resp.status == 200) {
                                    this.project.selectedJson = resp.data;
                                    Swal.fire({
                                        position: "top-end",
                                        icon: "success",
                                        title: "The status of the project has been updated..",
                                        showConfirmButton: false,
                                        timer: 1500
                                    });

                                } else {
                                    Swal.fire({
                                        position: "top-end",
                                        icon: "error",
                                        title: "Failed to update project status",
                                        showConfirmButton: false,
                                        timer: 1500
                                    });
                                }

                            }).finally(() => {
                                this.status.waiting = true;
                            });
                    }
                });
            }
        }
    })

</script>